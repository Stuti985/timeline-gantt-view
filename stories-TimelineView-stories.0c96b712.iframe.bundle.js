"use strict";(self.webpackChunktimeline_gantt_view=self.webpackChunktimeline_gantt_view||[]).push([[425],{"./src/stories/TimelineView.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Accessibility:()=>Accessibility,AccessibilityKeyboardDemo:()=>AccessibilityKeyboardDemo,CustomColorTasks:()=>CustomColorTasks,DarkMode:()=>DarkMode,Default:()=>Default,Empty:()=>Empty,HighContrastExample:()=>HighContrastExample,Interactive:()=>Interactive,MobileView:()=>MobileView,OverlappingTasks:()=>OverlappingTasks,PerformanceTest:()=>PerformanceTest,ViewModes:()=>ViewModes,WithDependencies:()=>WithDependencies,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TimelineView_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js");const calculateLeft=(date,start,pixelsPerDay)=>Math.round((date.getTime()-start.getTime())/864e5*pixelsPerDay);var addDays=__webpack_require__("./node_modules/date-fns/addDays.js"),addWeeks=__webpack_require__("./node_modules/date-fns/addWeeks.js"),addMonths=__webpack_require__("./node_modules/date-fns/addMonths.js"),format=__webpack_require__("./node_modules/date-fns/format.js");const TIMELINE_CONSTANTS={DEFAULT_VIEW_MODE:"week",DEFAULT_PIXELS_PER_DAY:40,DEFAULT_ROW_HEIGHT:64,LEFT_PANEL_WIDTH:220,VIEW_MODES:{DAY:"day",WEEK:"week",MONTH:"month"},PIXELS_PER_UNIT:{day:40,week:80,month:120},DATE_FORMATS:{day:"EEE dd",week:"'Week' ww",month:"MMM yyyy"},COLORS:{primary:"#0ea5e9",primaryDark:"#0284c7",success:"#10b981",warning:"#f59e0b",error:"#ef4444",neutralLight:"#f4f4f5",neutralDark:"#18181b",gridLine:"#e4e4e7",todayLine:"#ef4444"},ANIMATION:{fadeIn:200,slide:300},TASK_HEIGHT:32,TASK_SPACING:16,MILESTONE_SIZE:20,RESIZE_HANDLE_WIDTH:4,SIDEBAR_WIDTH:400,KEYBOARD:{MOVE_LEFT:"ArrowLeft",MOVE_RIGHT:"ArrowRight",MOVE_UP:"ArrowUp",MOVE_DOWN:"ArrowDown",ENTER:"Enter",ESC:"Escape"}},addByView=(TIMELINE_CONSTANTS.PIXELS_PER_UNIT.day,TIMELINE_CONSTANTS.PIXELS_PER_UNIT.week,TIMELINE_CONSTANTS.PIXELS_PER_UNIT.month,(date,view)=>"day"===view?(0,addDays.f)(date,1):"week"===view?(0,addWeeks.J)(date,1):(0,addMonths.P)(date,1)),TimelineGrid=({startDate,endDate,viewMode,pixelsPerDay})=>{const scale=((start,end,view)=>{const arr=[];let cur=new Date(start);for(;cur<=end;)arr.push({date:new Date(cur),label:(0,format.GP)(cur,TIMELINE_CONSTANTS.DATE_FORMATS[view])}),cur=addByView(cur,view);return arr})(startDate,endDate,viewMode);return(0,jsx_runtime.jsx)("div",{style:{position:"relative"},children:scale.map(s=>{const left=calculateLeft(s.date,startDate,pixelsPerDay);return(0,jsx_runtime.jsx)("div",{style:{position:"absolute",left,top:0,width:Math.max(1,pixelsPerDay),height:48,borderRight:"1px solid #eef2f7",display:"flex",alignItems:"center",justifyContent:"center"},children:(0,jsx_runtime.jsx)("div",{className:"text-xs text-neutral-700",children:s.label})},s.date.toISOString())})})},DependencyLine=({x1,y1,x2,y2})=>{const cx1=x1+24,cx2=x2-24;return(0,jsx_runtime.jsx)("path",{d:`M ${x1} ${y1} C ${cx1} ${y1} ${cx2} ${y2} ${x2} ${y2}`,stroke:"#94a3b8",strokeWidth:2,fill:"none",markerEnd:"url(#arrowhead)"})};var proxy=__webpack_require__("./node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs");const Taskbar=react.memo(({task,left,width,top,onOpen,pixelsPerDay=20,onCommit})=>{const ref=(0,react.useRef)(null),[localLeft,setLocalLeft]=(0,react.useState)(left),[localWidth,setLocalWidth]=(0,react.useState)(width),[dragging,setDragging]=(0,react.useState)(!1),[resizing,setResizing]=(0,react.useState)(null),pointerIdRef=(0,react.useRef)(null);(0,react.useEffect)(()=>{setLocalLeft(left),setLocalWidth(width)},[left,width]);const onMove=(0,react.useCallback)(e=>{(dragging||resizing)&&(dragging&&setLocalLeft(l=>Math.max(0,l+e.movementX)),"left"===resizing&&(setLocalLeft(l=>Math.max(0,l+e.movementX)),setLocalWidth(w=>Math.max(10,w-e.movementX))),"right"===resizing&&setLocalWidth(w=>Math.max(10,w+e.movementX)))},[dragging,resizing]),onUp=(0,react.useCallback)(()=>{if((dragging||resizing)&&onCommit?.(task.id,localLeft,localWidth),setDragging(!1),setResizing(null),null!==pointerIdRef.current){try{ref.current?.releasePointerCapture(pointerIdRef.current)}catch{}pointerIdRef.current=null}},[dragging,resizing,localLeft,localWidth,onCommit,task.id]);(0,react.useEffect)(()=>(window.addEventListener("pointermove",onMove),window.addEventListener("pointerup",onUp),()=>{window.removeEventListener("pointermove",onMove),window.removeEventListener("pointerup",onUp)}),[onMove,onUp]);const onPointerDown=(0,react.useCallback)((e,handle)=>{e.target.setPointerCapture?.(e.pointerId),pointerIdRef.current=e.pointerId,"left"===handle?setResizing("left"):"right"===handle?setResizing("right"):setDragging(!0)},[]),onKeyDown=(0,react.useCallback)(e=>{switch(e.key){case"Enter":case" ":onOpen(task.id),e.preventDefault();break;case"ArrowLeft":setLocalLeft(l=>Math.max(0,l-pixelsPerDay));break;case"ArrowRight":setLocalLeft(l=>l+pixelsPerDay);break;case"Escape":setDragging(!1),setResizing(null)}},[onOpen,task.id,pixelsPerDay]),ariaLabel=(0,react.useMemo)(()=>`${task.title}. From ${(0,format.GP)(task.startDate,"MMM d, yyyy")} to ${(0,format.GP)(task.endDate,"MMM d, yyyy")}. Progress: ${task.progress}%. Press Enter to edit.`,[task]),bgColor=task.color||"#0ea5e9",textColor=(bgColor=>{const c=bgColor.startsWith("#")?bgColor.slice(1):bgColor;if(6!==c.length)return"#fff";const rgb=parseInt(c,16);return(299*(rgb>>16&255)+587*(rgb>>8&255)+114*(255&rgb))/1e3>150?"#000":"#fff"})(bgColor);return(0,jsx_runtime.jsxs)(proxy.P.div,{ref,role:"button",tabIndex:0,"aria-label":ariaLabel,"aria-describedby":`task-${task.id}-details`,onKeyDown,onDoubleClick:()=>onOpen(task.id),onPointerDown:e=>onPointerDown(e),style:{position:"absolute",left:localLeft,top,width:localWidth,height:task.isMilestone?24:32,backgroundColor:bgColor,borderRadius:6,color:textColor,display:"flex",alignItems:"center",padding:"0 8px",boxShadow:dragging?"0 8px 20px rgba(0,0,0,0.15)":"0 2px 6px rgba(0,0,0,0.08)",cursor:dragging?"grabbing":"grab",userSelect:"none",fontWeight:500,outline:"none"},className:"focus-visible:ring-2 focus-visible:ring-blue-700 focus-visible:ring-offset-2",initial:{opacity:0,y:-4},animate:{opacity:1,y:0},transition:{duration:.12},children:[(0,jsx_runtime.jsx)("div",{id:`task-${task.id}-details`,style:{flex:1,fontSize:12,whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"},children:task.title}),!task.isMilestone&&(0,jsx_runtime.jsxs)("div",{style:{marginLeft:8,fontSize:12},children:[task.progress,"%"]}),(0,jsx_runtime.jsx)("div",{"data-handle":"left",onPointerDown:e=>onPointerDown(e,"left"),style:{position:"absolute",left:0,top:0,bottom:0,width:8,cursor:"ew-resize"},"aria-label":"Resize start date",role:"separator"}),(0,jsx_runtime.jsx)("div",{"data-handle":"right",onPointerDown:e=>onPointerDown(e,"right"),style:{position:"absolute",right:0,top:0,bottom:0,width:8,cursor:"ew-resize"},"aria-label":"Resize start date",role:"separator"})]})});var lodash_throttle=__webpack_require__("./node_modules/lodash.throttle/index.js"),lodash_throttle_default=__webpack_require__.n(lodash_throttle);const TaskDetailSidebar=(0,react.lazy)(()=>__webpack_require__.e(507).then(__webpack_require__.bind(__webpack_require__,"./src/components/Timeline/TaskDetailSidebar.tsx")).then(m=>({default:m.default}))),TimelineView=react.memo(function TimelineView({rows,tasks,startDate,endDate,viewMode,onTaskUpdate}){const pixelsPerDay="day"===viewMode?40:"week"===viewMode?20:10,start=startDate instanceof Date?startDate:new Date(startDate),totalDays=((endDate instanceof Date?endDate:new Date(endDate)).getTime()-start.getTime())/864e5,timelineWidth=Math.max(800,totalDays*pixelsPerDay+200),containerRef=(0,react.useRef)(null),[selectedTask,setSelectedTask]=(0,react.useState)(null),[zoom,setZoom]=(0,react.useState)(1);(0,react.useEffect)(()=>{const el=containerRef.current;if(!el)return;const handleWheel=lodash_throttle_default()(e=>{e.ctrlKey?(e.preventDefault(),setZoom(z=>Math.min(2,Math.max(.5,z-.001*e.deltaY)))):el.scrollBy({left:e.deltaY,behavior:"smooth"})},16);return el.addEventListener("wheel",handleWheel,{passive:!1}),()=>el.removeEventListener("wheel",handleWheel)},[]);const positions=(0,react.useMemo)(()=>{const map=new Map;return(rows||[]).forEach((row,ri)=>{(row.tasks||[]).forEach(tid=>{const t=tasks[tid];if(!t)return;const left=calculateLeft(new Date(t.startDate),new Date(startDate),pixelsPerDay),width=((start,end,pixelsPerDay)=>Math.max(1,Math.round((end.getTime()-start.getTime())/864e5*pixelsPerDay)))(new Date(t.startDate),new Date(t.endDate),pixelsPerDay),top=64*ri+12;map.set(tid,{left,width,top})})}),map},[rows,tasks,startDate,pixelsPerDay]),depPaths=(0,react.useMemo)(()=>{const arr=[];return Object.values(tasks).forEach(t=>{t.dependencies?.forEach(depId=>{const from=positions.get(depId),to=positions.get(t.id);if(!from||!to)return;const x1=from.left+from.width+220,y1=from.top+48,x2=to.left+220,y2=to.top+48;arr.push((0,jsx_runtime.jsx)(DependencyLine,{x1,y1,x2,y2},`${depId}-${t.id}`))})}),arr},[tasks,positions]),commitPosition=(0,react.useCallback)((taskId,left,width)=>{const days=Math.round(left/(pixelsPerDay*zoom)),newStart=new Date(startDate);newStart.setDate(newStart.getDate()+days);const durDays=Math.max(1,Math.round(width/(pixelsPerDay*zoom))),newEnd=new Date(newStart);newEnd.setDate(newEnd.getDate()+durDays),onTaskUpdate(taskId,{startDate:newStart,endDate:newEnd})},[onTaskUpdate,startDate,pixelsPerDay,zoom]);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)("section",{className:"relative border rounded bg-white",role:"region","aria-label":"Project Timeline section",style:{minHeight:64*rows.length+80},children:(0,jsx_runtime.jsxs)("div",{style:{display:"flex"},children:[(0,jsx_runtime.jsxs)("nav",{"aria-label":"Resource list panel",style:{width:220,borderRight:"1px solid #e6edf3",background:"#f9fafb",position:"sticky",left:0,zIndex:6},children:[(0,jsx_runtime.jsx)("header",{style:{height:48,display:"flex",alignItems:"center",paddingLeft:12},children:(0,jsx_runtime.jsx)("h2",{className:"text-sm font-semibold",style:{color:"#1e293b"},children:"Resources"})}),(0,jsx_runtime.jsx)("ul",{style:{margin:0,padding:0,listStyle:"none"},role:"list","aria-label":"Resource rows",children:rows.map(r=>(0,jsx_runtime.jsx)("li",{style:{height:64,display:"flex",alignItems:"center",paddingLeft:12,borderBottom:"1px solid #f3f4f6",backgroundColor:"#ffffff"},children:(0,jsx_runtime.jsx)("span",{className:"text-xs font-medium",style:{color:"#0f172a"},children:r.label})},r.id))})]}),(0,jsx_runtime.jsx)("section",{ref:containerRef,role:"region","aria-label":"Scrollable project timeline area",tabIndex:0,className:"bg-white",style:{overflowX:"auto",width:"100%",outline:"none",background:"#ffffff"},children:(0,jsx_runtime.jsxs)("div",{style:{position:"relative",width:timelineWidth},children:[(0,jsx_runtime.jsxs)("div",{style:{position:"sticky",top:0,zIndex:5,background:"#fff",marginLeft:220,height:48},role:"region","aria-label":"Timeline header grid",children:[(0,jsx_runtime.jsx)(TimelineGrid,{startDate,endDate,viewMode,pixelsPerDay:pixelsPerDay*zoom}),(0,jsx_runtime.jsx)("div",{style:{position:"absolute",left:calculateLeft(new Date,startDate,pixelsPerDay*zoom),top:0,bottom:0,width:2,background:"#ef4444"},"aria-hidden":"true"})]}),(0,jsx_runtime.jsxs)("div",{style:{position:"relative"},children:[(0,jsx_runtime.jsxs)("svg",{style:{position:"absolute",left:220,top:48,width:timelineWidth*zoom,height:64*rows.length},"aria-hidden":"true",children:[(0,jsx_runtime.jsx)("defs",{children:(0,jsx_runtime.jsx)("marker",{id:"arrowhead",markerWidth:"10",markerHeight:"10",refX:"9",refY:"3",orient:"auto",children:(0,jsx_runtime.jsx)("polygon",{points:"0 0, 10 3, 0 6",fill:"#94a3b8"})})}),(0,jsx_runtime.jsx)("g",{children:depPaths})]}),(0,jsx_runtime.jsx)("div",{style:{marginLeft:220,paddingTop:48},role:"list","aria-label":"Timeline task rows",children:rows.map(row=>(0,jsx_runtime.jsx)("div",{style:{height:64,position:"relative",borderBottom:"1px solid #f3f4f6",backgroundColor:"#ffffff"},children:row.tasks.map(tid=>{const t=tasks[tid];if(!t)return null;const pos=positions.get(tid);return(0,jsx_runtime.jsx)(Taskbar,{task:t,left:pos.left,width:pos.width,top:pos.top,onOpen:()=>setSelectedTask(t.id),onCommit:(id,l,w)=>commitPosition(id,l,w),pixelsPerDay:pixelsPerDay*zoom},t.id)})},row.id))})]})]})})]})}),selectedTask&&tasks[selectedTask]&&(0,jsx_runtime.jsx)(react.Suspense,{fallback:(0,jsx_runtime.jsx)("div",{children:"Loading task details..."}),children:(0,jsx_runtime.jsx)("aside",{role:"complementary","aria-label":`Task details sidebar for ${tasks[selectedTask].title||tasks[selectedTask].id}`,className:"fixed right-0 top-0 h-full w-[360px] bg-white shadow-lg z-10 border-l",children:(0,jsx_runtime.jsx)(TaskDetailSidebar,{task:tasks[selectedTask],onClose:()=>setSelectedTask(null),onSave:u=>{onTaskUpdate(selectedTask,u),setSelectedTask(null)}})})})]})}),sampleRows=[{id:"row-1",label:"Frontend Team",avatar:"",tasks:["task-1","task-2"]},{id:"row-2",label:"Backend Team",avatar:"",tasks:["task-3"]},{id:"row-3",label:"Design Team",avatar:"",tasks:["task-4"]}],sampleTasks={"task-1":{id:"task-1",title:"UI Component Development",startDate:new Date(2024,0,1),endDate:new Date(2024,0,15),progress:60,assignee:"Alice",rowId:"row-1",dependencies:[],color:"#3b82f6",isMilestone:!1},"task-2":{id:"task-2",title:"Integration Testing",startDate:new Date(2024,0,16),endDate:new Date(2024,0,25),progress:0,assignee:"Bob",rowId:"row-1",dependencies:["task-1","task-3"],color:"#3b82f6",isMilestone:!1},"task-3":{id:"task-3",title:"API Development",startDate:new Date(2024,0,1),endDate:new Date(2024,0,14),progress:80,assignee:"Charlie",rowId:"row-2",dependencies:[],color:"#10b981",isMilestone:!1},"task-4":{id:"task-4",title:"Design System Update",startDate:new Date(2024,0,5),endDate:new Date(2024,0,12),progress:100,assignee:"Dana",rowId:"row-3",dependencies:[],color:"#f59e0b",isMilestone:!1}},TimelineView_stories={title:"Components/Timeline/TimelineView",component:TimelineView,parameters:{layout:"fullscreen"},argTypes:{viewMode:{control:{type:"radio"},options:["day","week","month"]},startDate:{control:"date"},endDate:{control:"date"},rows:{control:"object"},tasks:{control:"object"}}},Default={args:{rows:sampleRows,tasks:sampleTasks,startDate:new Date("2025-01-01"),endDate:new Date("2025-01-31"),viewMode:"week",onTaskUpdate:()=>{}}},Empty={args:{rows:[],tasks:{},startDate:new Date("2025-01-01"),endDate:new Date("2025-01-31"),viewMode:"week",onTaskUpdate:()=>{}}},WithDependencies={args:{...Default.args,tasks:{t1:{id:"t1",rowId:"r1",title:"Task A",startDate:new Date("2025-01-02"),endDate:new Date("2025-01-06"),progress:40},t2:{id:"t2",rowId:"r2",title:"Task B",startDate:new Date("2025-01-07"),endDate:new Date("2025-01-10"),progress:20,dependencies:["t1"]}},rows:[{id:"r1",label:"Development",tasks:["t1"]},{id:"r2",label:"Testing",tasks:["t2"]}]}},ViewModes={render:()=>{const[mode,setMode]=(0,react.useState)("week");return(0,jsx_runtime.jsxs)("div",{className:"p-4",children:[(0,jsx_runtime.jsxs)("nav",{"aria-label":"View mode selector",className:"mb-2 flex gap-2",children:[(0,jsx_runtime.jsx)("button",{onClick:()=>setMode("day"),className:"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100",children:"Day"}),(0,jsx_runtime.jsx)("button",{onClick:()=>setMode("week"),className:"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100",children:"Week"}),(0,jsx_runtime.jsx)("button",{onClick:()=>setMode("month"),className:"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100",children:"Month"})]}),(0,jsx_runtime.jsx)("main",{children:(0,jsx_runtime.jsx)(TimelineView,{viewMode:mode,rows:sampleRows,tasks:sampleTasks,startDate:new Date("2025-01-01"),endDate:new Date("2025-01-31"),onTaskUpdate:()=>{}})})]})},args:{rows:sampleRows,tasks:sampleTasks,startDate:new Date("2025-01-01"),endDate:new Date("2025-01-31"),onTaskUpdate:()=>{}}},Interactive={render:args=>{const[tasks,setTasks]=(0,react.useState)(sampleTasks);return(0,jsx_runtime.jsx)(TimelineView,{...args,tasks,onTaskUpdate:(taskId,updates)=>{setTasks(prev=>({...prev,[taskId]:{...prev[taskId],...updates}}))}})},args:Default.args},MobileView={render:args=>(0,jsx_runtime.jsx)("div",{style:{width:390},children:(0,jsx_runtime.jsx)(TimelineView,{...args})}),args:Default.args},Accessibility={render:args=>(0,jsx_runtime.jsx)(TimelineView,{...args}),args:Default.args,parameters:{a11y:{config:{rules:[{id:"color-contrast",enabled:!0}]}}}},AccessibilityKeyboardDemo={render:args=>(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)("p",{className:"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100",children:["Use ",(0,jsx_runtime.jsx)("kbd",{children:"Tab"})," to move between tasks and ",(0,jsx_runtime.jsx)("kbd",{children:"Enter"})," to open task details."]}),(0,jsx_runtime.jsx)(TimelineView,{...args})]}),args:Default.args},PerformanceTest={args:{...Default.args,tasks:Object.fromEntries(Array.from({length:150}).map((_,i)=>[`task-${i}`,{id:`task-${i}`,rowId:"r"+(i%10+1),title:`Task ${i}`,startDate:new Date(2025,0,i%25+1),endDate:new Date(2025,0,i%25+4),progress:Math.floor(100*Math.random())}]))}},OverlappingTasks={args:{rows:[{id:"r1",label:"Development",tasks:["t1","t2"]},{id:"r2",label:"Testing",tasks:["t3"]}],tasks:{t1:{id:"t1",rowId:"r1",title:"Backend API",startDate:new Date("2025-10-01"),endDate:new Date("2025-10-07"),progress:70},t2:{id:"t2",rowId:"r1",title:"Frontend UI",startDate:new Date("2025-10-05"),endDate:new Date("2025-10-10"),progress:50},t3:{id:"t3",rowId:"r2",title:"Integration Test",startDate:new Date("2025-10-08"),endDate:new Date("2025-10-15"),progress:20}},startDate:new Date("2025-10-01"),endDate:new Date("2025-10-20"),viewMode:"day",onTaskUpdate:()=>{}},parameters:{docs:{description:{story:"Demonstrates overlapping tasks on the same timeline row to show resource conflicts or concurrent work."}}}},CustomColorTasks={args:{rows:[{id:"r1",label:"Design Team",tasks:["t1","t2"]}],tasks:{t1:{id:"t1",rowId:"r1",title:"UI Design",startDate:new Date("2025-10-02"),endDate:new Date("2025-10-05"),progress:90,color:"#e63946"},t2:{id:"t2",rowId:"r1",title:"UX Review",startDate:new Date("2025-10-06"),endDate:new Date("2025-10-09"),progress:60,color:"#2a9d8f"}},startDate:new Date("2025-10-01"),endDate:new Date("2025-10-15"),viewMode:"day",onTaskUpdate:()=>{}},parameters:{docs:{description:{story:"Demonstrates custom task colors based on priority, type, or progress. Useful for visual differentiation."}}}},DarkMode={args:Default.args,parameters:{backgrounds:{default:"dark"},docs:{description:{story:"Shows the timeline in dark mode for accessibility and theming consistency."}}}},HighContrastExample={render:()=>(0,jsx_runtime.jsx)("section",{className:"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100","aria-label":"High Contrast Example Section",children:(0,jsx_runtime.jsx)("p",{className:"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100",children:"High Contrast Text Example"})})},__namedExportsOrder=["Default","Empty","WithDependencies","ViewModes","Interactive","MobileView","Accessibility","AccessibilityKeyboardDemo","PerformanceTest","OverlappingTasks","CustomColorTasks","DarkMode","HighContrastExample"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    rows: sampleRows,\n    tasks: sampleTasks,\n    startDate: new Date('2025-01-01'),\n    endDate: new Date('2025-01-31'),\n    viewMode: 'week',\n    onTaskUpdate: () => {}\n  }\n}",...Default.parameters?.docs?.source}}},Empty.parameters={...Empty.parameters,docs:{...Empty.parameters?.docs,source:{originalSource:"{\n  args: {\n    rows: [],\n    tasks: {},\n    startDate: new Date('2025-01-01'),\n    endDate: new Date('2025-01-31'),\n    viewMode: 'week',\n    onTaskUpdate: () => {}\n  }\n}",...Empty.parameters?.docs?.source}}},WithDependencies.parameters={...WithDependencies.parameters,docs:{...WithDependencies.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Default.args,\n    tasks: {\n      t1: {\n        id: 't1',\n        rowId: 'r1',\n        title: 'Task A',\n        startDate: new Date('2025-01-02'),\n        endDate: new Date('2025-01-06'),\n        progress: 40\n      },\n      t2: {\n        id: 't2',\n        rowId: 'r2',\n        title: 'Task B',\n        startDate: new Date('2025-01-07'),\n        endDate: new Date('2025-01-10'),\n        progress: 20,\n        dependencies: ['t1']\n      }\n    },\n    rows: [{\n      id: 'r1',\n      label: 'Development',\n      tasks: ['t1']\n    }, {\n      id: 'r2',\n      label: 'Testing',\n      tasks: ['t2']\n    }]\n  }\n}",...WithDependencies.parameters?.docs?.source}}},ViewModes.parameters={...ViewModes.parameters,docs:{...ViewModes.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    const [mode, setMode] = useState<'day' | 'week' | 'month'>('week');\n    return <div className=\"p-4\">\r\n           <nav aria-label=\"View mode selector\" className=\"mb-2 flex gap-2\">\r\n\r\n          <button onClick={() => setMode('day')} className=\"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100\">Day</button>\r\n          <button onClick={() => setMode('week')} className=\"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100\">Week</button>\r\n          <button onClick={() => setMode('month')} className=\"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100\">Month</button>\r\n          </nav>\r\n\r\n        <main>\r\n        <TimelineView viewMode={mode} rows={sampleRows} tasks={sampleTasks} startDate={new Date('2025-01-01')} endDate={new Date('2025-01-31')} onTaskUpdate={() => {}} />\r\n          </main>\r\n      </div>;\n  },\n  args: {\n    rows: sampleRows,\n    tasks: sampleTasks,\n    startDate: new Date('2025-01-01'),\n    endDate: new Date('2025-01-31'),\n    onTaskUpdate: () => {}\n  }\n}",...ViewModes.parameters?.docs?.source}}},Interactive.parameters={...Interactive.parameters,docs:{...Interactive.parameters?.docs,source:{originalSource:"{\n  render: (args: TimelineViewProps) => {\n    const [tasks, setTasks] = useState<Record<string, TimelineTask>>(sampleTasks);\n    const handleUpdate = (taskId: string, updates: Partial<TimelineTask>) => {\n      setTasks(prev => ({\n        ...prev,\n        [taskId]: {\n          ...prev[taskId],\n          ...updates\n        }\n      }));\n    };\n    return <TimelineView {...args} tasks={tasks} onTaskUpdate={handleUpdate} />;\n  },\n  args: Default.args\n}",...Interactive.parameters?.docs?.source}}},MobileView.parameters={...MobileView.parameters,docs:{...MobileView.parameters?.docs,source:{originalSource:"{\n  render: (args: TimelineViewProps) => <div style={{\n    width: 390\n  }}><TimelineView {...args} /></div>,\n  args: Default.args\n}",...MobileView.parameters?.docs?.source}}},Accessibility.parameters={...Accessibility.parameters,docs:{...Accessibility.parameters?.docs,source:{originalSource:"{\n  render: (args: TimelineViewProps) => <TimelineView {...args} />,\n  args: Default.args,\n  parameters: {\n    a11y: {\n      config: {\n        rules: [{\n          id: 'color-contrast',\n          enabled: true\n        }]\n      }\n    }\n  }\n}",...Accessibility.parameters?.docs?.source}}},AccessibilityKeyboardDemo.parameters={...AccessibilityKeyboardDemo.parameters,docs:{...AccessibilityKeyboardDemo.parameters?.docs,source:{originalSource:'{\n  render: (args: TimelineViewProps) => {\n    return <div>\r\n        <p className="bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100">\r\n          Use <kbd>Tab</kbd> to move between tasks and <kbd>Enter</kbd> to open task details.\r\n        </p>\r\n        <TimelineView {...args} />\r\n      </div>;\n  },\n  args: Default.args\n}',...AccessibilityKeyboardDemo.parameters?.docs?.source}}},PerformanceTest.parameters={...PerformanceTest.parameters,docs:{...PerformanceTest.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Default.args,\n    tasks: Object.fromEntries(Array.from({\n      length: 150\n    }).map((_, i) => [`task-${i}`, {\n      id: `task-${i}`,\n      rowId: `r${i % 10 + 1}`,\n      title: `Task ${i}`,\n      startDate: new Date(2025, 0, i % 25 + 1),\n      endDate: new Date(2025, 0, i % 25 + 4),\n      progress: Math.floor(Math.random() * 100)\n    }]))\n  }\n}",...PerformanceTest.parameters?.docs?.source}}},OverlappingTasks.parameters={...OverlappingTasks.parameters,docs:{...OverlappingTasks.parameters?.docs,source:{originalSource:"{\n  args: {\n    rows: [{\n      id: 'r1',\n      label: 'Development',\n      tasks: ['t1', 't2']\n    }, {\n      id: 'r2',\n      label: 'Testing',\n      tasks: ['t3']\n    }],\n    tasks: {\n      t1: {\n        id: 't1',\n        rowId: 'r1',\n        title: 'Backend API',\n        startDate: new Date('2025-10-01'),\n        endDate: new Date('2025-10-07'),\n        progress: 70\n      },\n      t2: {\n        id: 't2',\n        rowId: 'r1',\n        title: 'Frontend UI',\n        startDate: new Date('2025-10-05'),\n        endDate: new Date('2025-10-10'),\n        progress: 50\n      },\n      t3: {\n        id: 't3',\n        rowId: 'r2',\n        title: 'Integration Test',\n        startDate: new Date('2025-10-08'),\n        endDate: new Date('2025-10-15'),\n        progress: 20\n      }\n    },\n    startDate: new Date('2025-10-01'),\n    endDate: new Date('2025-10-20'),\n    viewMode: 'day',\n    onTaskUpdate: () => {}\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates overlapping tasks on the same timeline row to show resource conflicts or concurrent work.'\n      }\n    }\n  }\n}",...OverlappingTasks.parameters?.docs?.source}}},CustomColorTasks.parameters={...CustomColorTasks.parameters,docs:{...CustomColorTasks.parameters?.docs,source:{originalSource:"{\n  args: {\n    rows: [{\n      id: 'r1',\n      label: 'Design Team',\n      tasks: ['t1', 't2']\n    }],\n    tasks: {\n      t1: {\n        id: 't1',\n        rowId: 'r1',\n        title: 'UI Design',\n        startDate: new Date('2025-10-02'),\n        endDate: new Date('2025-10-05'),\n        progress: 90,\n        color: '#e63946'\n      },\n      t2: {\n        id: 't2',\n        rowId: 'r1',\n        title: 'UX Review',\n        startDate: new Date('2025-10-06'),\n        endDate: new Date('2025-10-09'),\n        progress: 60,\n        color: '#2a9d8f'\n      }\n    },\n    startDate: new Date('2025-10-01'),\n    endDate: new Date('2025-10-15'),\n    viewMode: 'day',\n    onTaskUpdate: () => {}\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates custom task colors based on priority, type, or progress. Useful for visual differentiation.'\n      }\n    }\n  }\n}",...CustomColorTasks.parameters?.docs?.source}}},DarkMode.parameters={...DarkMode.parameters,docs:{...DarkMode.parameters?.docs,source:{originalSource:"{\n  args: Default.args,\n  parameters: {\n    backgrounds: {\n      default: 'dark'\n    },\n    docs: {\n      description: {\n        story: \"Shows the timeline in dark mode for accessibility and theming consistency.\"\n      }\n    }\n  }\n}",...DarkMode.parameters?.docs?.source}}},HighContrastExample.parameters={...HighContrastExample.parameters,docs:{...HighContrastExample.parameters?.docs,source:{originalSource:'{\n  render: () => <section className="bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100" aria-label="High Contrast Example Section">\r\n    {/* <div className="bg-white p-4"> */}\r\n      <p className="bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100">High Contrast Text Example</p>\r\n    </section>\n  // parameters: {\n  //   a11y: {\n  //     config: {\n  //       rules: [{ id: \'color-contrast\', enabled: true }],\n  //     },\n  //   },\n}',...HighContrastExample.parameters?.docs?.source}}}}}]);